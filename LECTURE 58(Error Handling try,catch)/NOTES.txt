In JavaScript, the try and catch blocks are used for error handling. They provide a way to gracefully handle and manage errors that may occur during the execution of code.

Suppose we have 10 lines of code and in 5th line we have an error so the program will stop on the 5th line , but we want the code to run furtuer even there is an error in 5th line so we will put that piece of code where there is a chance of error in try and catch block.

1). try Block: The try block is used to enclose a section of code where you expect potential errors to occur.
If an error occurs within the try block, the normal flow of execution is interrupted, and the control is transferred to the catch block.

2). catch Block: The catch block is executed only if an error occurs in the corresponding try block.
It takes an error parameter, which represents the caught error object.
You can use this block to handle the error, log information, or take any appropriate action.

EXAMPLE: try {
  // Code that may cause an error
  // ...
} catch (error) {
  // Code to handle the error
  console.error('An error occurred:', error.message);
}
We can give any parameter name in catch() not only error is compulosry. Catch is a function which take one parameter and that parameter is just responsible to print that error so you can name any to this parameter you want but write the same name of that parameter inside the catch block.

NOTE: The try catch works synchoronously if an exception happens in scheduled code , like in settimeout then try catch wont work.

When you use setTimeout or other asynchronous functions, the code inside them is scheduled to run later, after the current synchronous execution context has completed. If an exception occurs in that asynchronously scheduled code, it won't be caught by the surrounding try-catch block because the try-catch has already finished its execution.

EXAMPLE: 
setTimeout(()=>{
    console.log("Hacking wifi.....Please wait....")
},1000)


try{
    setTimeout(() => {
        console.log(asad)
    }, 2000);
}
catch(error){
    console.log(error)
}

setTimeout(()=>{
    console.log("Fetching username and passwordd......Please wait......")
},3000)

in the try catch block there is an error but when try executes it schedule the code to run after 2 sec as setTimeout() is used , and the further codes started to get executed after try catch and after 2 second the program will get error then the program simply prints the error , as written above try catch works synchoronoulsy they will not wait for the error , as when the try executed initially there was no error , the error comes after 2 seconds of the execution of try block.

-> So to overcome it we have to write try and catch within the setTimeout()

EXAMPLE:

setTimeout(() => {
        try{
        console.log(asad)
        }
        catch(error)
        {
            console.log(error)
        }
    }, 2000);
Now , when the setTimeout() executed the try will get an error imediately and then pass the flow to the catch() block.