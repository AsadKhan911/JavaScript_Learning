 If any of the promises in the chain encounters an error, it will jump to the nearest .catch() block down the chain.

EXMAPLE:const loadScript = (src) => {
    return new Promise((resolve,reject)=>{
        let script = document.createElement("script")
        script.type = "text/javascript"
        script.src = src
        document.body.appendChild(script)
    
        script.onload = () =>{
            resolve(1)
        }
        script.onerror=()=>{
            reject(0)
        }
    }   
)}

let p1 = loadScript("script.js")

p1.then((value)=>{ //p1 contains a promise as in p1 we initialize a function which is returning a promise

    console.log("Script 1 loaded successfully with value: "+value)
    return loadScript("s.js")
    
}).then((value)=>{
    console.log("2nd Script loaded successfully with value: "+value)
}).catch((value)=>{

    console.log("Sorry having problem loading script with value: "+value)

})

In this example, you have a .catch() at the end to handle errors for any of the promises in the chain. If an error occurs in any of the promises (either the initial loadScript(src) or the subsequent loadScript("s.js")), the control will jump to the nearest .catch() block, and the corresponding error message will be logged.

-> It is also possible to have a separate .catch() block for each promise in the chain. When chaining promises with .then(), you can attach a .catch() block immediately after each .then() block to handle errors for that specific promise. This allows you to handle errors at different points in the chain more specifically.

EXAMPLE: 

let p1 = loadScript("script1.js");

p1.then((value) => {
  console.log("Script 1 loaded successfully with value: " + value);
  return loadScript("script2.js");
})
.catch((error) => {
  console.error("Error loading script 1: " + error);
})
.then((value) => {
  console.log("Script 2 loaded successfully with value: " + value);
  return loadScript("script3.js");
})
.catch((error) => {
  console.error("Error loading script 2: " + error);
})
.then((value) => {
  console.log("Script 3 loaded successfully with value: " + value);
})
.catch((error) => {
  console.error("Error loading script 3: " + error);
});


